# javascript-
javascript修炼之道研读笔记
2017/6/19
知识内化的过程看是否能够实践，每个开始应作为提升自己的为前提。 
本书所有代码都被打包并存档在本书网站上，如果想测试这些代码的效果，请访问 http://demo.pocketjavascript.com


内容简介：
第一部分包含了JavaScript开发者经常忽视但又非常重要的JavaScript编码模式。为了编写良好的JavaScript代码，它们不可或缺。
第二部分，主要包括基本的DOM和css的抄作，以及事件的处理和定时器的使用。
第三部分主要讲用户界面，尤其是视觉效果和简洁的UI理念：漂亮的tooltip、光箱特效、图片预载入、无限滚动等。
第四部分主要讲绝大多数weby应用的重要组成部分---表单。
第五部分主要讲客户端和服务器之间的关系，涉及的话题包括cookie、json、以及Ajax(域和域间)。
第五部分主要讲如何使用混搭（mashup）思想和使用第三方服务。


第一章：JavaScript必备操作
任务一：学到如何动态的访问对象的属性和方法。
任务二：学习如何将代码控制在一个私有的作用域。
任务三：学习如何创建具有多样参数的函数。


任务二：通过模块模式实现代码访问控制
随着你的JavaScript代码库的扩大，本应该被控制在私有作用域中的函数和变量将会被暴露的越来越多。就会出现bug.
应此，我们需要编写自包含的、不透明的JavaScript代码，它不会向外界暴露内部的细节，也不会与现有的框架和库出现冲突。所以才要使用模块模式开发。
模块模式的主要思想，是为那些通过var关键字声明的标识符合函数创建一个私有作用域，只有定义在这个作用域里的函数才能直接访问这些数据。为了使外界
能够访问到函数里的部分内容。我们有两个选择。其一是返回一个包含选定值的对象。然后报这个对象赋给外界的变量；另一种则是给函数传入一个外部作用域可访问
的对象作为参数，使该函数能在这个对象中写入自己的属性（如果想让它的属性成为全局属性，只需传入window对象）。

JavaScript中，使用var关键字声明的标识符是局部的（它们只属于当前定义的作用域）。而未使用var关键字声明标识符是全局的（它们会被嫁接到当前的默认作用域。
而默认作用域在大多数情况下就是全局的window对象。）

在返回对象中用匿名函数的方式定义公有方法，会使代码晦涩难懂，使代码调试难以运行，因此，尽可能用命名函数表达式来定义你的函数。
function myfunctionaName(){
//代码
}
这会使代码更加清晰，同时也便于调试时观察栈轨迹。


第二章：DOM，事件及定时器。
DOM操作一般分一下几类。
1.获得DOM元素的引用，以便进行操作。
2.改变DOM元素的外观，可以是直接修改，也可以是使用动画（大多会通过显示。隐藏或移动元素来修改样式）。
3.修改DOM元素的内容

由于上面的操作都是在页面初始化时、响应特定的事件或在一段时间发生后得以执行，因此我们还需要讨论以下内容。
任务7阐述了页面初始化的概念。具体地说，我们利用这些概念来检测DOM是否载入完成，以便对其进行操作。
任务8提供了事件监听的基本概念。
任务9提供了高效监听事件的方案。
而任务10则进一步阐述了如何发挥事件的威力。
任务11展示了如何使用定时器（给出了一个通过定时器模拟后台处理的例子）。

获得DOM元素的引用
获得页面上的DOM元素以及“遍历”DOM（从一个元素移至另一个元素）是编写Web脚本的必需操作。
虽然现在的浏览器已经可以提供不错的DOM元素获取方法，不过在不使用库的情况下遍历DOM仍然非常烦琐。因此在实际工作中，我们都需要使用这样或那样的库。
在这里需要注意以下几点。
首先，要注意document.getElementById，任何依赖于这个方法的代码都会成为IE怪异行为的牺牲品。因为在IE中，这个方法也会通过name属性来寻找
匹配的元素。如果你使用的是严格的DOCTYPE（你应该这么做），这看起来意味着只需要“注意字段的命名”。由于你已经在潜意识中排除了<head>和<meta>标签
的name属性，所以当你不知不觉地定义了一个id属性和<meta>标签特定属性相同的元素后，如果你用document.getElementById获取它，
你将会惊讶地发现你得到的是<meta>元素！所以，尽可能避免使用这些特殊值作为id属性的值。

绝大多数选择元素的技术，都需要先指定上下文节点或根节点，然后以这个节点作为根元素，在其之上进行选择操作。默认的上下文是整个文档。
翻阅一下API文档，你会发现诸如$$()、query()以及$()等方法都有一个可选参数（一般是第二个），以便你来指定上下文元素。
注：要记住，搜索范围越窄，选择的速度也就越快。
最后，原始的DOM API并不适合实际的元素访问操作，因为它们适用于节点，而不是元素。原始的DOM API会让你陷入到空白节点、注释节点、文本节点等节点
的泥潭之中，因此，绝大多数库提供了不错的面向元素的辅助方法。Prototype、jQuery和MooTools都提供了丰富的API
，这包括previous()（或prev()）、next()、siblings()、ancestors()等方法，还包括那些以get为前缀的同类方法。
YUI 3 API中提供的方法略微少些，而Dojo和Ext JS则暂时缺乏此类辅助方法。
绝大多数的库都支持基于ID和基于CSS3的选择。

通过ID属性获得对应的元素
document。getElementById("Id名");
$("id名")
$("#id")

元素间的移动(遍历DOM)



制作友好的弹窗
不管用“真”弹窗（单独的窗口）还是“伪”弹窗（实际是当前页面的元素，只是设置成类似窗口的样式），都会碰到这个问题：如何让那些不能（或者不想）打开新窗口的用户访问这些内容？想想窗口弹出被禁用的情况以及屏幕阅读器、搜索引擎的访问等。
只有一种办法：先让链接真正链接到弹窗的内容，然后从那里开始逐步地改善效果。
如果你的内容是要作为HTML片段显示在伪弹窗中（可能还通过Ajax载入），那么不管带不带document标记，你都需要确保在另一处提供其访问路径。那样一来，用户就能通过普通的链接，以不管用“真”弹窗（单独的窗口）还是“伪”弹窗（实际是当前页面的元素，只是设置成类似窗口的样式），都会碰到这个问题：如何让那些不能（或者不想）打开新窗口的用户访问这些内容？想想窗口弹出被禁用的情况以及屏幕阅读器、搜索引擎的访问等。
只有一种办法：先让链接真正链接到弹窗的内容，然后从那里开始逐步地改善效果。
如果你的内容是要作为HTML片段显示在伪弹窗中（可能还通过Ajax载入），那么不管带不带document标记，你都需要确保在另一处提供其访问路径。那样一来，用户就能通过普通的链接，以单独页面的形式访问到它，看到好的效果。
实际操作的要点是：用<a>标签链接到要弹出的内容（href=，或许还要加上target= "_blank"），然后给这些链接挂上JavaScript代码，让它们活动起来。窗口弹出代码很简单——就是用内置的window.open()方法。
如果需要伪弹窗或者光箱，一定要使用优秀的现有库以远离地狱般的跨浏览器问题和布局算法。这里有一些可选项：
Scripty2的UI部分
jQuery UI
Dijit（基于Dojo）
YUI的覆盖模块
Ext.Window
另外要记住，如果弹窗内容较少的话，使用单击触发的tooltip就足够了，而不必使用全功能的弹窗。如果遇到这种情况，查查tooltip库和模块。

用于渐进式效果提升的HTML代码
<p>我有一段话可说<a class="poup" target="_blank" href="http://pragprog.com/titles/pg_js">javasctit</a></p>

普通的window.open()脚本
